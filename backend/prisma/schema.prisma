generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  createdAt   DateTime @default(now())

  Sender      Users @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  Receiver    Users @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Users {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  phone_number  String  @unique
  password_hash String
  role          String  @default("NONE")
  Loans         Loans[]
  Deposits      Deposits[]
  Cards         Cards[]
  SentMessages     ChatMessage[] @relation("SentMessages")
  ReceivedMessages ChatMessage[] @relation("ReceivedMessages")
}

model Loans {
  id            Int    @id @default(autoincrement())
  user_id       Int
  amount        Decimal
  interest_rate Float
  term          Int
  status        String @default("waiting")
  created_at    DateTime @default(now())
  monthly_payment_amount Decimal?
  outstanding_principal  Decimal?
  paid_amount            Decimal?   @default(0)
  next_payment_due_date  DateTime?
  last_payment_date      DateTime?
  activated_at           DateTime?

  accrued_penalty               Decimal?   @default(0)
  last_penalty_calculation_date DateTime?

  Users         Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  LoanPayments  LoanPayment[]
}

model LoanPayment {
  id              Int      @id @default(autoincrement())
  loan_id         Int
  payment_date    DateTime @default(now())
  amount_paid     Decimal
  principal_paid  Decimal
  interest_paid   Decimal
  outstanding_principal_after_payment Decimal
  notes           String?

  Loan            Loans    @relation(fields: [loan_id], references: [id], onDelete: Cascade)

  @@index([loan_id])
}

model Deposits {
  id            Int    @id @default(autoincrement())
  user_id       Int
  amount        Decimal
  interest_rate Float
  term          Int
  status        String @default("active")
  created_at    DateTime @default(now())

  approved_at   DateTime?
  maturity_date DateTime?
  closed_at     DateTime?

  calculated_accrued_interest Float?
  calculated_total_payout   Decimal?

  early_withdrawal_requested_at DateTime?
  early_withdrawal_penalty_percent Float? @default(50.0)

  Users         Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Cards {
  id            Int     @id @default(autoincrement())
  card_number   String  @unique
  cvv           Int
  holder_id     Int
  pin           Int
  balance       Decimal
  dueDate       String
  status        String  @default("waiting")
  Users         Users   @relation(fields: [holder_id], references: [id], onDelete: Cascade)

  SentTransactions     CardTransaction[] @relation("SentCardTransactions")
  ReceivedTransactions CardTransaction[] @relation("ReceivedCardTransactions")
}

model CardTransaction {
  id                Int      @id @default(autoincrement())
  amount            Decimal
  timestamp         DateTime @default(now())
  description       String
  senderCardId      Int
  receiverCardId    Int

  SenderCard        Cards    @relation("SentCardTransactions", fields: [senderCardId], references: [id], onDelete: Cascade)
  ReceiverCard      Cards    @relation("ReceivedCardTransactions", fields: [receiverCardId], references: [id], onDelete: Cascade)

  @@index([senderCardId])
  @@index([receiverCardId])
}
